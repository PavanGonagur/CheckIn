@model CheckIn.Web.Models.Channel.ChannelViewModel

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">Add new Channel</h4>
</div>

<div class="modal-body">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ChannelId)

            
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-7">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
          
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-7">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-1"></div>
                <div class="col-md-6">
                    <div class="material-switch">
                        <input class="form-control check-box" data-val="true" data-val-required="The IsPublic field is required." id="IsPublic" name="IsPublic" type="checkbox" value="true">
                        <label for="IsPublic" class="label-success"></label>
                    </div>
                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsLocationBased, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-1"></div>
                <div class="col-md-6">
                    <div class="material-switch">
                        <input class="form-control check-box" data-val="true" data-val-required="The IsLocationBased field is required." id="IsLocationBased" name="IsLocationBased" type="checkbox" value="true">
                        <label for="IsLocationBased" class="label-success"></label>
                    </div>
                    @Html.ValidationMessageFor(model => model.IsLocationBased, "", new { @class = "text-danger" })
                </div>
            </div>
                <div class="location-coordinates">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TimeOfActivation, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-7">
                    <div class="input-group date" id="datetimepicker1">
                        @Html.EditorFor(model => model.TimeOfActivation, new { htmlAttributes = new { @class = "form-control date" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.TimeOfActivation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TimeOfDeactivation, htmlAttributes: new {@class = "control-label col-md-4"})

                <div class="col-md-7">
                    <div class="input-group date" id="datetimepicker2">
                        @Html.EditorFor(model => model.TimeOfDeactivation, new {htmlAttributes = new {@class = "form-control date"}})
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.TimeOfDeactivation, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TwitterHashtag, htmlAttributes: new {@class = "control-label col-md-4"})
                <div class="col-md-7">
                    @Html.EditorFor(model => model.TwitterHashtag, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.TwitterHashtag, "", new {@class = "text-danger"})
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MobileWebsite, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-7">
                    @Html.EditorFor(model => model.MobileWebsite, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MobileWebsite, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr />
            <div class="modal-footer">
                @*<div class="col-md-10">*@
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="submit" id="approve-btn" class="btn btn-danger">Save</button>
                @*</div>*@
            </div>
        </div>
    }
</div>
@*<div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="submit" id="approve-btn" class="btn btn-danger">Save</button>
    </div>*@

<script type="text/javascript">
    $(function () {
        if ('@Model.IsLocationBased' == 'True') {
            $("input#IsLocationBased").prop('checked', true);
        }
        if ('@Model.IsPublic' == 'True') {
            $("input#IsPublic").prop('checked', true);
        }
        $('#approve-btn').click(function () {
            $('#modal-container').modal('hide');
        });
        $('#datetimepicker1').datetimepicker();
        $('#datetimepicker2').datetimepicker({
            useCurrent: false //Important! See issue #1075
        });
        $("#datetimepicker1").on("dp.change", function (e) {
            $('#datetimepicker2').data("DateTimePicker").minDate(e.date);
        });
        $("#datetimepicker2").on("dp.change", function (e) {
            $('#datetimepicker1').data("DateTimePicker").maxDate(e.date);
        });

        var isLocationBased = $("#IsLocationBased").is(':checked');
        if (isLocationBased) {
            $("div.location-coordinates").show();
        } else {
            $("div.location-coordinates").hide();
        }
        $("#IsLocationBased")
            .change(function () {
                $("div.location-coordinates").toggle(this.checked);
            });
        });
</script>

